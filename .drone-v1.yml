---
kind: pipeline
name: default
type: kubernetes

platform:
  os: linux
  arch: amd64

steps:
- name: init-test
  pull: always
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export MOCK_ID=$${AWS_ACCESS_KEY_ID}
  - export MOCK_KEY=$${AWS_SECRET_ACCESS_KEY}
  - export TF_VAR_ENV_ACCT_ID=$${AWS_ACCESS_KEY_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${AWS_SECRET_ACCESS_KEY}
  - echo "provider \"aws\" { region = \"eu-west-2\" }" > provider.tf
  - echo -e "terraform {\n  backend \"s3\" {}\n}" > backend.tf
  - echo -e "remote_state {\n  backend = \"s3\"\n  config = {\n  bucket = \"dacc-dq-test-yellow-team\"\n  region = \"eu-west-2\"\n  dynamodb_table = \"terraform-state\"\n  key = \"test/dq-tf-aws-compliance.tfstate\"\n  encrypt = true \n  }\n}" > terragrunt.hcl
  - terragrunt init
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
  when:
    branch:
      exclude:
      - main
    event:
    - push

- name: testsuite
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  commands:
  - docker run --rm -v $(pwd):/data -w /data hashicorp/terraform fmt --diff --check
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
  when:
    branch:
      exclude:
      - main
    event:
    - push

- name: validate-test
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export TF_VAR_ENV_ACCT_ID=$${AWS_ACCESS_KEY_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${AWS_SECRET_ACCESS_KEY}
  - export MOCK_ID=${AWS_ACCESS_KEY_ID}
  - export MOCK_KEY=${AWS_SECRET_ACCESS_KEY}
  - terragrunt validate
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    TF_VAR_MOCK_ID:
      from_secret: TF_VAR_MOCK_ID
    TF_VAR_MOCK_KEY:
      from_secret: TF_VAR_MOCK_KEY
  when:
    branch:
      exclude:
      - main
    event:
    - push

- name: plan-test
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export MOCK_ID=${TEST_AWS_ACCESS_KEY_ID}
  - export MOCK_KEY=${TEST_AWS_SECRET_ACCESS_KEY}
  - export TF_VAR_ENV_ACCT_ID=$${AWS_ACCESS_KEY_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${AWS_SECRET_ACCESS_KEY}
  - terragrunt plan -lock=false -out=plan
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    TF_VAR_MOCK_ID:
      from_secret: TF_VAR_MOCK_ID
    TF_VAR_MOCK_KEY:
      from_secret: TF_VAR_MOCK_KEY
  when:
    branch:
      exclude:
      - main
    event:
    - push

- name: apply-test
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export MOCK_ID=${AWS_ACCESS_KEY_ID}
  - export MOCK_KEY=${AWS_SECRET_ACCESS_KEY}
  - terragrunt apply -auto-approve -parallelism=50 plan
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    TF_VAR_MOCK_ID:
      from_secret: TF_VAR_MOCK_ID
    TF_VAR_MOCK_KEY:
      from_secret: TF_VAR_MOCK_KEY
  when:
    branch:
      exclude:
      - main
      - plan/*
    event:
    - push

- name: init-ci
  pull: always
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export MOCK_ID=$${AWS_ACCESS_KEY_ID}
  - export MOCK_KEY=$${AWS_SECRET_ACCESS_KEY}
  - export TF_VAR_ENV_ACCT_ID=$${AWS_ACCESS_KEY_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${AWS_SECRET_ACCESS_KEY}
  - echo "provider \"aws\" { region = \"eu-west-2\" }" > provider.tf
  - echo -e "terraform {\n  backend \"s3\" {}\n}" > backend.tf
  - echo -e "remote_state {\n  backend = \"s3\"\n  config = {\n  bucket = \"dacc-dq-test-yellow-team\"\n  region = \"eu-west-2\"\n  dynamodb_table = \"terraform-state\"\n  key = \"ci/dq-tf-aws-compliance.tfstate\"\n  encrypt = true \n  }\n}" > terragrunt.hcl
  - terragrunt init
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
  when:
    event:
    - push

- name: plan-ci
  pull: always
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export TF_VAR_ENV_ACCT_ID=$${CI_ACC_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${CI_ACC_KEY}
  - terragrunt plan -lock=false -out=plan
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    CI_ACC_ID:
      from_secret: CI_ACC_ID
    CI_ACC_KEY:
      from_secret: CI_ACC_KEY
    TF_VAR_namespace: ci
    TF_VAR_naming_suffix: apps-ci-dq
  when:
    branch:
    - main
    - plan/*
    event:
    - push

- name: apply-ci
  pull: always
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export TF_VAR_ENV_ACCT_ID=$${CI_ACC_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${CI_ACC_KEY}
  - terragrunt apply -auto-approve -parallelism=50 plan
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    CI_ACC_ID:
      from_secret: CI_ACC_ID
    CI_ACC_KEY:
      from_secret: CI_ACC_KEY
    TF_VAR_namespace: ci
    TF_VAR_naming_suffix: apps-ci-dq
  when:
    branch:
      include:
      - main
      exclude:
      - plan/*
    event:
    - push

- name: init-notprod
  pull: always
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export TF_VAR_ENV_ACCT_ID=$${NOTPROD_ACC_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${NOTPROD_ACC_KEY}
  - echo -e "terraform {\n  backend \"s3\" {}\n}" > backend.tf
  - echo -e "remote_state {\n  backend = \"s3\"\n  config = {\n  bucket = \"dacc-dq-test-yellow-team\"\n  region = \"eu-west-2\"\n  dynamodb_table = \"terraform-state\"\n  key = \"notprod/dq-tf-aws-compliance.tfstate\"\n  encrypt = true \n }\n}" > terragrunt.hcl
  - terragrunt init
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    NOTPROD_ACC_ID:
      from_secret: NOTPROD_ACC_ID
    NOTPROD_ACC_KEY:
      from_secret: NOTPROD_ACC_KEY
    TF_VAR_namespace: notprod
    TF_VAR_naming_suffix: apps-notprod-dq
  when:
    event:
    - push

- name: plan-notprod
  pull: always
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export TF_VAR_ENV_ACCT_ID=$${NOTPROD_ACC_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${NOTPROD_ACC_KEY}
  - terragrunt plan -lock=false -out=plan
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    NOTPROD_ACC_ID:
      from_secret: NOTPROD_ACC_ID
    NOTPROD_ACC_KEY:
      from_secret: NOTPROD_ACC_KEY
    TF_VAR_namespace: notprod
    TF_VAR_naming_suffix: apps-notprod-dq
  when:
    branch:
    - main
    - plan/*
    event:
    - push

- name: apply-notprod
  pull: always
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export TF_VAR_ENV_ACCT_ID=$${NOTPROD_ACC_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${NOTPROD_ACC_KEY}
  - terragrunt apply -auto-approve -parallelism=50 plan
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    NOTPROD_ACC_ID:
      from_secret: NOTPROD_ACC_ID
    NOTPROD_ACC_KEY:
      from_secret: NOTPROD_ACC_KEY
    TF_VAR_namespace: notprod
    TF_VAR_naming_suffix: apps-notprod-dq
  when:
    branch:
      include:
      - main
      exclude:
      - plan/*
    event:
    - push

- name: init-prod
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export TF_VAR_ENV_ACCT_ID=$${PROD_ACC_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${PROD_ACC_KEY}
  - echo -e "terraform {\n  backend \"s3\" {}\n}" > backend.tf
  - echo -e "remote_state {\n  backend = \"s3\"\n  config = {\n  bucket = \"dacc-dq-test-yellow-team\"\n  region = \"eu-west-2\"\n  dynamodb_table = \"terraform-state\"\n  key = \"prod/dq-tf-aws-compliance.tfstate\"\n  encrypt = true \n }\n}" > terragrunt.hcl
  - terragrunt init -reconfigure
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    PROD_ACC_ID:
      from_secret: PROD_ACC_ID
    PROD_ACC_KEY:
      from_secret: PROD_ACC_KEY
    TF_VAR_namespace: prod
    TF_VAR_naming_suffix: apps-prod-dq
  when:
    event:
    - promote
    - push

- name: plan-prod
  pull: always
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export TF_VAR_ENV_ACCT_ID=$${PROD_ACC_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${PROD_ACC_KEY}
  - terragrunt plan -lock=false -out=prodplan
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    PROD_ACC_ID:
      from_secret: PROD_ACC_ID
    PROD_ACC_KEY:
      from_secret: PROD_ACC_KEY
    TF_VAR_namespace: prod
    TF_VAR_naming_suffix: apps-prod-dq
  when:
    branch:
    - main
    - plan/*
    event:
    - promote
    - push

- name: apply-prod
  pull: always
  image: quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18
  commands:
  - export TF_VAR_ENV_ACCT_ID=$${PROD_ACC_ID}
  - export TF_VAR_ENV_ACCT_KEY=$${PROD_ACC_KEY}
  - terragrunt apply -auto-approve -parallelism=50 prodplan
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    PROD_ACC_ID:
      from_secret: PROD_ACC_ID
    PROD_ACC_KEY:
      from_secret: PROD_ACC_KEY
    TF_VAR_namespace: prod
    TF_VAR_naming_suffix: apps-prod-dq
  when:
    branch:
    - main
    event:
    - promote
    target:
    - prod

- name: sonar-scanner
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/sonar-scanner:v3.0.3
  when:
    event:
    - push
    - pull_request
    target:
      exclude:
      - production

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
