---
global-variables:
  vault-image: &vault-image docker.digital.homeoffice.gov.uk/dq/dq-vault-awscli:1.43
  terragrunt-image: &terragrunt-image quay.io/ukhomeofficedigital/dq-docker-terragrunt:v0.23.18

kind: pipeline
name: default
type: kubernetes

platform:
  os: linux
  arch: amd64

x-anchors:
  retrieve-deployment-aws-key: &retrieve-deployment-aws-key
    # Retrive vault secrets
    - vault read aws_dacc_dq/creds/drone > aws_creds.json
    - export LEASE_ID=$(cat aws_creds.json | grep lease_id | awk -F ' ' '{print $2}')
    # Update the token TTL to 10mins
    - vault lease renew -increment=1200 $${LEASE_ID}
    # Get the AWS credentials
    - echo "export DEP_AWS_ACCESS_KEY_ID=$(cat aws_creds.json | grep access_key | awk -F ' ' '{print $2}')" > set_aws_secrets.sh
    - echo "export DEP_AWS_SECRET_ACCESS_KEY=$(cat aws_creds.json | grep secret_key | awk -F ' ' '{print $2}')" >> set_aws_secrets.sh
    - echo "export AWS_DEFAULT_REGION=eu-west-2" >> set_aws_secrets.sh
    # Since AWS is eventually consistent we need to sleep a little while so the AWS key is created and made available
    - sleep 15

  retrieve-state-aws-key: &retrieve-state-aws-key
    # Retrive vault secrets
    - vault read aws_dacc_dq/creds/drone > aws_creds.json
    - export LEASE_ID=$(cat aws_creds.json | grep lease_id | awk -F ' ' '{print $2}')
    # Update the token TTL to 10mins
    - vault lease renew -increment=1200 $${LEASE_ID}
    # Get the AWS credentials
    - echo "export STATE_AWS_ACCESS_KEY_ID=$(cat aws_creds.json | grep access_key | awk -F ' ' '{print $2}')" > state_secret.sh
    - echo "export STATE_AWS_SECRET_ACCESS_KEY=$(cat aws_creds.json | grep secret_key | awk -F ' ' '{print $2}')" >> state_secret.sh
    - echo "export AWS_DEFAULT_REGION=eu-west-2" >> state_secret.sh
    - sleep 15

  tf-init: &tf-init
    - source state_secret.sh
    - source set_aws_secrets.sh
    # - export MOCK_ID=$${AWS_ACCESS_KEY_ID}
    # - export MOCK_KEY=$${AWS_SECRET_ACCESS_KEY}
    - export AWS_ACCESS_KEY_ID=$${STATE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=$${STATE_AWS_SECRET_ACCESS_KEY}
    - export TF_VAR_ENV_ACCT_ID=$${DEP_AWS_ACCESS_KEY_ID}
    - export TF_VAR_ENV_ACCT_KEY=$${DEP_AWS_SECRET_ACCESS_KEY}
    - echo -e "provider \"aws\" {\n  region = \"eu-west-2\"\n}" > provider.tf
    - echo -e "terraform {\n  backend \"s3\" {}\n}" > backend.tf
    - echo -e "remote_state {\n  backend = \"s3\"\n  config = {\n  bucket = \"dacc-dq-test-yellow-team\"\n  region = \"eu-west-2\"\n  dynamodb_table = \"terraform-state\"\n  key = \"$ENV/dq-tf-aws-compliance.tfstate\"\n  encrypt = true \n  }\n}" > terragrunt.hcl
    - terragrunt init

  tf-validate: &tf-validate
    - source state_secret.sh
    - source set_aws_secrets.sh
    # - export MOCK_ID=$${AWS_ACCESS_KEY_ID}
    # - export MOCK_KEY=$${AWS_SECRET_ACCESS_KEY}
    - export AWS_ACCESS_KEY_ID=$${STATE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=$${STATE_AWS_SECRET_ACCESS_KEY}
    - export TF_VAR_ENV_ACCT_ID=$${DEP_AWS_ACCESS_KEY_ID}
    - export TF_VAR_ENV_ACCT_KEY=$${DEP_AWS_SECRET_ACCESS_KEY}
    - terragrunt validate

  tf-plan: &tf-plan
    - source state_secret.sh
    - source set_aws_secrets.sh
    # - export MOCK_ID=$${AWS_ACCESS_KEY_ID}
    # - export MOCK_KEY=$${AWS_SECRET_ACCESS_KEY}
    - export AWS_ACCESS_KEY_ID=$${STATE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=$${STATE_AWS_SECRET_ACCESS_KEY}
    - export TF_VAR_ENV_ACCT_ID=$${DEP_AWS_ACCESS_KEY_ID}
    - export TF_VAR_ENV_ACCT_KEY=$${DEP_AWS_SECRET_ACCESS_KEY}
    - terragrunt plan -lock=false -out=plan

  tf-apply: &tf-apply
    - source state_secret.sh
    - source set_aws_secrets.sh
    # - export MOCK_ID=$${AWS_ACCESS_KEY_ID}
    # - export MOCK_KEY=$${AWS_SECRET_ACCESS_KEY}
    - export AWS_ACCESS_KEY_ID=$${STATE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=$${STATE_AWS_SECRET_ACCESS_KEY}
    - export TF_VAR_ENV_ACCT_ID=$${DEP_AWS_ACCESS_KEY_ID}
    - export TF_VAR_ENV_ACCT_KEY=$${DEP_AWS_SECRET_ACCESS_KEY}
    - terragrunt apply -auto-approve -parallelism=50 plan

steps:
- name: retrieve_aws_secrets_test
  pull: if-not-exists
  image: *vault-image
  commands:
    *retrieve-deployment-aws-key
  environment:
    VAULT_ADDR:
      from_secret: VAULT_ADDR_DEV
    VAULT_TOKEN:
      from_secret: VAULT_TOKEN_DEV
  when:
    event:
      - push
      - promote

- name: retrieve_aws_state_keys
  pull: if-not-exists
  image: *vault-image
  commands:
    *retrieve-state-aws-key
  environment:
    VAULT_ADDR:
      from_secret: VAULT_ADDR_DEV
    VAULT_TOKEN:
      from_secret: VAULT_TOKEN_DEV
  when:
    event:
      - push
      - promote

- name: init-test
  pull: always
  image: *terragrunt-image
  commands:
    *tf-init
  environment:
    ENV: test
  when:
    branch:
      exclude:
      - main
    event:
    - push

- name: testsuite
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  commands:
  - docker run --rm -v $(pwd):/data -w /data hashicorp/terraform fmt --diff --check
  # environment:
  #   AWS_ACCESS_KEY_ID:
  #     from_secret: AWS_ACCESS_KEY_ID
  #   AWS_SECRET_ACCESS_KEY:
  #     from_secret: AWS_SECRET_ACCESS_KEY
  when:
    branch:
      exclude:
      - main
    event:
    - push

- name: validate-test
  pull: if-not-exists
  image: *terragrunt-image
  commands:
    *tf-validate
  when:
    branch:
      exclude:
      - main
    event:
    - push

- name: plan-test
  pull: if-not-exists
  image: *terragrunt-image
  commands:
    *tf-plan
  when:
    branch:
      exclude:
      - main
    event:
    - push

- name: apply-test
  pull: if-not-exists
  image: *terragrunt-image
  commands:
    *tf-apply
  when:
    branch:
      exclude:
      - main
      - plan/*
    event:
    - push

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind